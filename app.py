import streamlit as st
import pandas as pd
import pydeck as pdk
from utils import get_live_drone_data, predict_paths, detect_anomalies, load_historical_data
from datetime import datetime

st.set_page_config(page_title="AeroMind", layout="wide")

# ЁЯМР Language Toggle
language = st.sidebar.selectbox("ЁЯМР Language", ["English", "родрооро┐ро┤рпН", "рд╣рд┐рдиреНрджреА"])

# ЁЯЧгя╕П Translation Dictionary
translations = {
    "English": {
        "title": "ЁЯЫ╕ AeroMind: UAV Traffic Control System",
        "mission_status": "Airspace monitoring active.",
        "no_anomalies": "тЬЕ No anomalies detected. All systems nominal.",
        "anomalies_found": "ЁЯЪи Anomalies detected! Immediate attention required.",
        "replay_mode": "тПк Mission Replay Mode",
        "select_timestamp": "Select Replay Timestamp",
        "selected_time": "Selected timestamp",
        "live_map": "ЁЯУН Live Drone Map",
        "predictions": "ЁЯза Predicted Paths & Risk Zones",
        "alerts": "тЪая╕П Anomaly Alerts",
        "control_panel": "ЁЯзн Mission Control Panel",
        "identity_panel": "ЁЯФР Drone Identity & Security"
    },
    "родрооро┐ро┤рпН": {
        "title": "ЁЯЫ╕ AeroMind: ро╡ро╛ройрпНро╡ро┤ро┐ роЯрпНро░рпЛройрпН роХрогрпНроХро╛рогро┐рокрпНрокрпБ роЕроорпИрокрпНрокрпБ",
        "mission_status": "ро╡ро╛ройрпНро╡ро┤ро┐ роХрогрпНроХро╛рогро┐рокрпНрокрпБ роЪрпЖропро▓рпНрокро╛роЯрпНроЯро┐ро▓рпН роЙро│рпНро│родрпБ.",
        "no_anomalies": "тЬЕ роОроирпНрод роЪро┐роХрпНроХро▓рпБроорпН роЗро▓рпНро▓рпИ. роЕройрпИродрпНродрпБ роЕроорпИрокрпНрокрпБроХро│рпБроорпН роЪро╛родро╛ро░рогрооро╛роХ роЗропроЩрпНроХрпБроХро┐ройрпНро▒рой.",
        "anomalies_found": "ЁЯЪи роЪро┐роХрпНроХро▓рпНроХро│рпН роХрогрпНроЯро▒ро┐ропрокрпНрокроЯрпНроЯрпБро│рпНро│рой! роЙроЯройроЯро┐ роХро╡ройроорпН родрпЗро╡рпИ.",
        "replay_mode": "тПк рооро┐ро╖ройрпН роорпАро│рпНрокро╛ро░рпНро╡рпИ",
        "select_timestamp": "роорпАро│рпНрокро╛ро░рпНро╡рпИ роирпЗро░родрпНродрпИ родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН",
        "selected_time": "родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХрокрпНрокроЯрпНроЯ роирпЗро░роорпН",
        "live_map": "ЁЯУН роЯрпНро░рпЛройрпН ро╡ро░рпИрокроЯроорпН",
        "predictions": "ЁЯза роОродро┐ро░рпНрокро╛ро░рпНроХрпНроХрокрпНрокроЯрпНроЯ рокро╛родрпИроХро│рпН рооро▒рпНро▒рпБроорпН роЕрокро╛роп роородро┐рокрпНрокрпАроЯрпБ",
        "alerts": "тЪая╕П роЪро┐роХрпНроХро▓рпН роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпН",
        "control_panel": "ЁЯзн рооро┐ро╖ройрпН роХроЯрпНроЯрпБрокрпНрокро╛роЯрпНроЯрпБ рокрпЗройро▓рпН",
        "identity_panel": "ЁЯФР роЯрпНро░рпЛройрпН роЕроЯрпИропро╛ро│роорпН рооро▒рпНро▒рпБроорпН рокро╛родрпБроХро╛рокрпНрокрпБ"
    },
    "рд╣рд┐рдиреНрджреА": {
        "title": "ЁЯЫ╕ AeroMind: рдпреВрдПрд╡реА рдЯреНрд░реИрдлрд┐рдХ рдХрдВрдЯреНрд░реЛрд▓ рд╕рд┐рд╕реНрдЯрдо",
        "mission_status": "рд╣рд╡рд╛рдИ рдХреНрд╖реЗрддреНрд░ рдирд┐рдЧрд░рд╛рдиреА рд╕рдХреНрд░рд┐рдп рд╣реИред",
        "no_anomalies": "тЬЕ рдХреЛрдИ рд╡рд┐рд╕рдВрдЧрддрд┐ рдирд╣реАрдВ рдорд┐рд▓реАред рд╕рднреА рд╕рд┐рд╕реНрдЯрдо рд╕рд╛рдорд╛рдиреНрдп рд╣реИрдВред",
        "anomalies_found": "ЁЯЪи рд╡рд┐рд╕рдВрдЧрддрд┐рдпрд╛рдБ рдорд┐рд▓реАрдВ! рддреБрд░рдВрдд рдзреНрдпрд╛рди рджреЗрдиреЗ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реИред",
        "replay_mode": "тПк рдорд┐рд╢рди рд░рд┐рдкреНрд▓реЗ рдореЛрдб",
        "select_timestamp": "рд░рд┐рдкреНрд▓реЗ рдЯрд╛рдЗрдорд╕реНрдЯреИрдореНрдк рдЪреБрдиреЗрдВ",
        "selected_time": "рдЪрдпрдирд┐рдд рд╕рдордп",
        "live_map": "ЁЯУН рд▓рд╛рдЗрд╡ рдбреНрд░реЛрди рдорд╛рдирдЪрд┐рддреНрд░",
        "predictions": "ЁЯза рдЕрдиреБрдорд╛рдирд┐рдд рдорд╛рд░реНрдЧ рдФрд░ рдЬреЛрдЦрд┐рдо рдХреНрд╖реЗрддреНрд░",
        "alerts": "тЪая╕П рд╡рд┐рд╕рдВрдЧрддрд┐ рдЕрд▓рд░реНрдЯ",
        "control_panel": "ЁЯзн рдорд┐рд╢рди рдирд┐рдпрдВрддреНрд░рдг рдкреИрдирд▓",
        "identity_panel": "ЁЯФР рдбреНрд░реЛрди рдкрд╣рдЪрд╛рди рдФрд░ рд╕реБрд░рдХреНрд╖рд╛"
    }
}

# Sidebar Branding & Controls
st.sidebar.image(
    "https://upload.wikimedia.org/wikipedia/commons/thumb/7/7e/Thales_Logo.svg/2560px-Thales_Logo.svg.png",
    width=180
)
st.sidebar.title("ЁЯзн AeroMind Control Panel")
selected_role = st.sidebar.selectbox("User Role", ["ATC Operator", "Admin"])
refresh_rate = st.sidebar.slider("Refresh Rate (sec)", 1, 30, 5)

st.sidebar.markdown("### ЁЯЫ░я╕П Mission Status")
st.sidebar.success(translations[language]["mission_status"])
st.sidebar.info(f"Last update: {pd.Timestamp.now().strftime('%H:%M:%S')}")

st.sidebar.markdown("### ЁЯОЦя╕П Domain Impact")
st.sidebar.markdown("""
- ЁЯЫбя╕П **Defence & Security**  
- тЬИя╕П **Aeronautics & Space**  
- ЁЯФР **Cybersecurity & Digital Identity**
""")

# Header
st.title(translations[language]["title"])
st.markdown("""
AeroMind is a next-gen UAV traffic control system designed for ThalesтАЩs aerospace missions.  
It delivers real-time drone tracking, AI-powered path prediction, and anomaly alertsтАФsecure, scalable, and ready for deployment.
""")

# Load Data
drone_df = get_live_drone_data()
hist_df = load_historical_data()
hist_df["timestamp"] = pd.to_datetime(hist_df["timestamp"])
timestamps = hist_df["timestamp"].dropna().sort_values().dt.to_pydatetime().tolist()

# Tabs
tab1, tab2, tab3, tab4 = st.tabs([
    translations[language]["live_map"],
    translations[language]["replay_mode"],
    translations[language]["predictions"],
    translations[language]["identity_panel"]
])

# ЁЯУН Live Map Tab
with tab1:
    st.subheader(translations[language]["live_map"])
    map_color = '[0, 255, 255, 160]' if selected_role == "Admin" else '[255, 165, 0, 160]'
    st.pydeck_chart(pdk.Deck(
        map_style='mapbox://styles/mapbox/dark-v10',
        initial_view_state=pdk.ViewState(
            latitude=drone_df['lat'].mean(),
            longitude=drone_df['lon'].mean(),
            zoom=6,
            pitch=50,
        ),
        layers=[
            pdk.Layer(
                'ScatterplotLayer',
                data=drone_df,
                get_position='[lon, lat]',
                get_color=map_color,
                get_radius=1000,
            ),
        ],
    ))
    st.dataframe(drone_df)

# тПк Mission Replay Tab
with tab2:
    st.subheader(translations[language]["replay_mode"])
    if timestamps:
        selected_time = st.slider(
            translations[language]["select_timestamp"],
            min_value=timestamps[0],
            max_value=timestamps[-1],
            value=timestamps[0],
            format="YYYY-MM-DD HH:mm:ss"
        )
        replay_df = hist_df[
            hist_df["timestamp"].dt.strftime("%Y-%m-%d %H:%M:%S") ==
            selected_time.strftime("%Y-%m-%d %H:%M:%S")
        ]
        st.info(f"{translations[language]['selected_time']}: {selected_time.strftime('%Y-%m-%d %H:%M:%S')}")
        st.map(replay_df[["lat", "lon"]])
        st.dataframe(replay_df)
    else:
        st.warning("No valid timestamps found in historical data.")

# ЁЯза Predictions & Alerts Tab
with tab3:
    st.subheader(translations[language]["predictions"])
    predictions = predict_paths(drone_df)
    st.dataframe(predictions.style.highlight_max(axis=0), use_container_width=True)

    st.subheader(translations[language]["alerts"])
    anomalies = detect_anomalies(drone_df)
    if anomalies.empty:
        st.success(translations[language]["no_anomalies"])
    else:
        st.error(translations[language]["anomalies_found"])
        st.dataframe(anomalies.style.highlight_null(color='red'), use_container_width=True)

# ЁЯФР Identity & Control Tab
with tab4:
    with st.expander(translations[language]["control_panel"]):
        st.button("Pause All Drones")
        st.button("Activate Emergency Protocol")
        st.selectbox("Reroute Drone", drone_df["drone_id"])

    with st.expander(translations[language]["identity_panel"]):
        st.dataframe(drone_df[["drone_id", "public_key", "role"]])
        selected_drone = st.selectbox("Select Drone for Secure Command", drone_df["drone_id"])
        st.text_input("ЁЯФС Enter Command (e.g., REROUTE, EMERGENCY)")
        st.button("ЁЯФТ Simulate Encrypted Dispatch")

# Footer
st.markdown("---")
st.markdown("тЬЕ **Built for Thales GenTech Hackathon 2025**")
st.markdown("ЁЯФз Powered by Streamlit, Python, and open-source intelligence")
st.caption("Designed for real-world deployment across Defence, Aerospace, and Cybersecurity domains.")